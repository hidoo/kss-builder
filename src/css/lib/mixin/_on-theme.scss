////
/// (c) hidoo | MIT Lisence
/// @group kss-builder
////

@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "@hidoo/unit/src/lib/mixin";
@use "../../settings" as _settings;

/// wrappper of theme state class like `is-theme-light`
/// @param {String} $state ["light"] - state keyword (one of `"light"`, `"dark"`, `"example-light"`, `"example-dark"`, `"example-light-transparent"` or `"example-dark-transparent"`)
/// @param {List} $capturing-selectors [()] - capturing parent selectors
///
/// @example scss - scss inputs
///   .selector {
///     @include on-theme("light") {
///       font-size: 16px;
///     }
///   }
///
/// @example css - css outputs
///   .selector.is-theme-light {
///     font-size: 16px;
///   }
///
@mixin on-theme($state: "light", $capturing-selectors: ()) {
  @if meta.type-of(_settings.$selector-theme) != "map" {
    @error "@mixin on-theme: _settings.$selector-theme must be map.";
  }

  $themes: map.keys(_settings.$selector-theme);

  @if not list.index($themes, $state) {
    @error "@mixin on-theme: Argument $state is one of #{list.join($themes, $separator: comma)}.";
  }

  $selectors: map.get(_settings.$selector-theme, $state);

  @if list.length($capturing-selectors) == 0 {
    $capturing-selectors: _settings.$selector-root;
  }

  @include mixin.on(
    $selectors: $selectors,
    $capturing-selectors: $capturing-selectors
  ) {
    @content;
  }
}
